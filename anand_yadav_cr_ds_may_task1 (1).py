# -*- coding: utf-8 -*-
"""Anand_Yadav_CR_DS_MAY_Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OLHd89ORM3P-TosSvCEYxtVxcnHh-CVs

Movie Recommendation system - Anand Yadav
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re
import ipywidgets as widgets
from IPython.display import display

movies_info = pd.read_csv("/content/drive/MyDrive/Inter/Codingraja/DS Intern/Tasks/Task-1/movies.csv")

from google.colab import drive
drive.mount('/content/drive')

movies_info.head(10)

import re

def clean(title):
    title = re.sub("[^a-zA-Z0-9 ]", "", title)
    return title

movies_info["clean"] = movies_info["title"].apply(clean)

movies_info.shape

movies_info["index"]= range(0, len(movies_info))
movies_info.head(10)

movies_info.head(-5)

vectorizer = TfidfVectorizer(ngram_range=(1,2))
feature_vectors = vectorizer.fit_transform(movies_info["clean"])

print(feature_vectors)

similarity = cosine_similarity(feature_vectors)

def search(title):
    title = clean(title)
    query_vec = vectorizer.transform([title])
    similarity = cosine_similarity(query_vec, feature_vectors).flatten()
    indices = np.argpartition(similarity, -5)[-5:]
    results = movies_info.iloc[indices][::-1]
    return results

movie_name ="avatar"#input(' Enter your favourite movie name : ')
result=search(movie_name)
result
for i in result["index"]:
    n=i
    break

similarity_score = list(enumerate(similarity[n]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_info[movies_info.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

def find_recommendation(index):
    similarity_score = list(enumerate(similarity[index]))
    sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
    print('Movies suggested for you : \n')

    i = 1

    for movie in sorted_similar_movies:
      index = movie[0]
      title_from_index = movies_info.iloc[index]['title']
      if (i<30):
        print(i, '.',title_from_index)
        i+=1

movie_name =input(' Enter your favourite movie name : ')
result=search(movie_name)
result
for i in result["index"]:
    n=i
    break
find_recommendation(n)

# Create widgets for user input
movie_input = widgets.Text(
    value='',
    placeholder='Type a movie name',
    description='Movie:',
    disabled=False
)

recommend_button = widgets.Button(
    description='Get Recommendations',
    disabled=False,
    button_style='',  # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Click to get recommendations',
    icon='check'  # (optional) FontAwesome icon name, e.g. 'check'
)

output = widgets.Output()

# Define the function to handle button click
def on_button_click(b):
    with output:
        output.clear_output()
        movie_name = movie_input.value
        find_recommendation(movie_name)

recommend_button.on_click(on_button_click)

# Display the widgets
display(movie_input, recommend_button, output)